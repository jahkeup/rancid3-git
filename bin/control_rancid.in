#! /usr/bin/env bash
##
## $Id: control_rancid.in 2823 2014-04-28 19:11:14Z heas $
##
## @PACKAGE@ @VERSION@
## Copyright (c) @COPYYEARS@ by Terrapin Communications, Inc.
## All rights reserved.
##
## This code is derived from software contributed to and maintained by
## Terrapin Communications, Inc. by Henry Kilmer, John Heasley, Andrew Partan,
## Pete Whiting, Austin Schutz, and Andrew Fort.
##
## Redistribution and use in source and binary forms, with or without
## modification, are permitted provided that the following conditions
## are met:
## 1. Redistributions of source code must retain the above copyright
##    notice, this list of conditions and the following disclaimer.
## 2. Redistributions in binary form must reproduce the above copyright
##    notice, this list of conditions and the following disclaimer in the
##    documentation and/or other materials provided with the distribution.
## 3. All advertising materials mentioning features or use of this software
##    must display the following acknowledgement:
##        This product includes software developed by Terrapin Communications,
##        Inc. and its contributors for RANCID.
## 4. Neither the name of Terrapin Communications, Inc. nor the names of its
##    contributors may be used to endorse or promote products derived from
##    this software without specific prior written permission.
## 5. It is requested that non-binding fixes and modifications be contributed
##    back to Terrapin Communications, Inc.
##
## THIS SOFTWARE IS PROVIDED BY Terrapin Communications, INC. AND CONTRIBUTORS
## ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
## TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COMPANY OR CONTRIBUTORS
## BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
## INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
## CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
## ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
## POSSIBILITY OF SUCH DAMAGE.
#
# control_rancid $GROUP
#

# print a usage message to stderr
pr_usage() {
    echo "usage: $0 [-V] [-f group_config_file] [-r device_name] [-m mail rcpt] group" >&2;
}

# command-line options
# -V print version string
# -f <group config file name>
# -m <mail recipients>
# -r <device name>
alt_mailrcpt=0
if [ $# -ge 1 ] ; then

    while [ 1 ] ; do
	case $1 in
	-V)
	    echo "@PACKAGE@ @VERSION@"
	    exit 0
	    ;;
	-f)
	    shift
	    # next arg is the alternate config file name
	    ENVFILE="$1"
	    if [ -z $ENVFILE ]; then
		pr_usage
		exit 1
	    fi
	    shift
	    ;;
	-m)
	    shift
	    # next arg is the mail recipient
	    alt_mailrcpt=1
	    if [ -z "$mailrcpt" ] ; then
		mailrcpt="$1"
	    else
		mailrcpt="$mailrcpt,$1"
	    fi
	    shift
	    ;;
	-r)
	    shift
	    # next arg is the device name
	    device="$1"
	    shift
	    ;;
	--)
	    shift; break;
	    ;;
	-h)
	    pr_usage
	    exit 0
	    ;;
	-*)
	    echo "unknown option: $1" >&2
	    pr_usage
	    exit 1
	    ;;
	*)
	    break;
	    ;;
	esac
    done
fi

# Must specify a group on which to run rancid
if [ $# -lt 1 ] ; then
    echo 'must specify group'; exit 1
else
    GROUP=$1
fi
DIR=$BASEDIR/$GROUP
TMP=${TMPDIR:=/tmp}/rancid.$GROUP.$$
if [ -z "$ENVFILE" ] ; then
    ENVFILE="$DIR/rancid.conf"
fi
if [ -f "$ENVFILE" ] ; then
    . $ENVFILE
fi
trap 'rm -fr $TMP;' 1 2 15

# disable noclobber
unset noclobber > /dev/null 2>&1

# SENDMAIL location
SENDMAIL=${SENDMAIL:=sendmail};

# RCS system
RCSSYS=${RCSSYS:=git};
if [ $RCSSYS != "cvs" -a $RCSSYS != "svn" -a $RCSSYS != "git" -a $RCSSYS != "git-remote" ] ; then
    echo "$RCSSYS is not a valid value for RCSSYS."
    exit 1
fi

# the receipient(s) of diffs & mail options
mailrcpt=${mailrcpt:-"@MAILPLUS@${GROUP}${MAILDOMAIN}"}; export mailrcpt
adminmailrcpt=${adminmailrcpt:-"@ADMINMAILPLUS@${GROUP}${MAILDOMAIN}"};
export adminmailrcpt
set | grep MAILHEADERS= > /dev/null 2>&1
if [ $? -ne 0 ] ; then
    MAILHEADERS="Precedence: bulk\n"; export MAILHEADERS
fi

# Number of things par should run in parallel.
PAR_COUNT=${PAR_COUNT:-5}
# Number of times failed collections should be retried.  Minimum 0.
MAX_ROUNDS=${MAX_ROUNDS:-4}
if [ $MAX_ROUNDS -lt 0 ] ; then
    echo "Error: MAX_ROUNDS must be at least 0 or greater."
    MAX_ROUNDS=1
fi

# Bail if we do not have the necessary info to run
if [ ! -d $DIR ] ; then
    echo "$DIR does not exist."
    echo "Run bin/rancid-cvs $GROUP to make all of the needed directories."
    (
	echo "To: $adminmailrcpt"
	echo "Subject: no $GROUP directory"
	echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
	echo ""
	echo "$DIR does not exist."
	echo "Run bin/rancid-cvs $GROUP to make all of the needed directories."
    ) | $SENDMAIL -t $MAILOPTS
    exit 1
fi
cd $DIR

create_ignore () {
    echo "*~"
    echo "routers.added"
    echo "routers.all"
    echo "routers.all.new"
    echo "routers.db"
    echo "routers.deleted"
    echo "routers.down"
    echo "routers.down.new"
    echo "routers.failed"
    echo "routers.mail"
    echo "routers.single"
    echo "routers.up"
    echo "routers.up.new"
    echo "routers.up.missed"
}

# create a .cvsignore
case $RCSSYS in
    cvs)
	rm -f .cvsignore
	create_ignore > .cvsignore
	;;
    svn)
	svn proplist . | grep -q 'svn:ignore'
	if [ $? -ne 0 ]; then
	    create_ignore > .svnignore
	    svn propset svn:ignore -F .svnignore .
	    svn commit -m 'set svn:ignores' .
	    rm -f .svnignore
	fi
	;;
    git | git-remote )
	if [ ! -f .gitignore ]; then
	    rm -f .gitignore
	    create_ignore > .gitignore
	    (
		flock -x 200
		git add .gitignore
		git commit -m "Adding .gitignore" ) 200>$BASEDIR/.lockfile
	fi
	;;
    *)

esac

# check if there is a rancid.conf and if it needs to be added to the RCS
if [ -f rancid.conf ] ; then
    if [ $RCSSYS = svn ] ; then
	LN=`svn ls rancid.conf | wc -l`
    else
	cvs log -rHEAD rancid.conf > /dev/null 2>&1
	if [ $? -eq 0 ] ; then LN=1; else LN=0; fi
    fi
    if [ $LN -eq 0 ] ; then
	$RCSSYS add rancid.conf
    fi
fi

# do cvs update of router.db in case anyone has fiddled.
case $RCSSYS in
    cvs | svn )
        # do cvs/svn update of router.db in case anyone has fiddled.
       $RCSSYS update router.db > $TMP 2>&1
       grep "^C" $TMP > /dev/null
       if [ $? -eq 0 ] ; then
           echo "There were $RCSSYS conflicts during update."
           echo ""
           cat $TMP
           rm -f $TMP
           exit 1
       fi
       rm -f $TMP
       ;;
    git | git-remote )
       # do nothing here (for now)
       ;;
esac


if [ ! -f $DIR/router.db ] ; then
    echo "$DIR/router.db does not exist."
    (
	echo "To: $adminmailrcpt"
	echo "Subject: no $GROUP/router.db file"
	echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
	echo ""
	echo "$DIR/router.db does not exist."
    ) | $SENDMAIL -t $MAILOPTS
    exit 1;
fi

# generate the list of all, up, & down routers
cd $DIR
trap 'rm -fr routers.db routers.all.new routers.down.new routers.up.new \
	routers.mail routers.added routers.deleted $TMP;' 1 2 15
sed -e '/^#/d' -e 's/^ *//' -e 's/ *$//' -e 's/ *; */;/g' router.db |
	tr '[A-Z]' '[a-z]' | sort -u > routers.db
cut -d\; -f1,2 routers.db > routers.all.new
if [ ! -f routers.all ] ; then touch routers.all; fi
@DIFF_CMD@ routers.all routers.all.new > /dev/null 2>&1; RALL=$?
@PERLV@ -F\; -ane '{$F[2] =~ s/\s*\$//; ($F[0] =~ tr@A-Z@a-z@, print $_)
    if ($F[2] !~ /^up$/i);}' routers.db > routers.down.new
if [ ! -f routers.down ] ; then touch routers.down; fi
@DIFF_CMD@ routers.down routers.down.new > /dev/null 2>&1; RDOWN=$?
@PERLV@ -F\; -ane '{$F[2] =~ s/\s*\$//; ($F[0] =~ tr@A-Z@a-z@,
    print "$F[0];$F[1]\n") if ($F[2] =~ /^up$/i);}' routers.db > routers.up.new
if [ ! -f routers.up ] ; then touch routers.up; fi
@DIFF_CMD@ routers.up routers.up.new > /dev/null 2>&1; RUP=$?

if [ $RALL -ne 0 -o $RDOWN -ne 0 -o $RUP -ne 0 ] ; then
    (
	if [ $RUP -ne 0 ] ; then
	    if [ ! -s routers.up ] ; then
		echo Routers changed to up:
		sed -e 's/^/        /' routers.up.new
		echo
	    else
		WCUP=`comm -13 routers.up routers.up.new | wc -l | \
			sed -e 's/^ *\([^ ]*\)/\1/'`
		if [ $WCUP -gt 0 ] ; then
		    echo Routers changed to up:
		    comm -13 routers.up routers.up.new | sed -e 's/^/        /'
		    echo
		fi
	    fi
	fi
	if [ $RDOWN -ne 0 ] ; then
	    if [ ! -s routers.down ] ; then
		echo Routers changed to down:
		sed -e 's/^/        /' routers.down.new
		echo
	    else
		WCDOWN=`comm -13 routers.down routers.down.new | wc -l | \
			sed -e 's/^ *\([^ ]*\)/\1/'`
		if [ $WCDOWN -eq 1 ] ; then
		    echo Routers changed to down:
		    comm -13 routers.down routers.down.new | \
			sed -e 's/^/        /'
		    echo
		fi
	    fi
	fi
	if [ $RALL -eq 1 ] ; then
	    comm -13 routers.all routers.all.new | sed -e 's/^/        /' \
		> routers.added
	    comm -23 routers.all routers.all.new | sed -e 's/^/        /' \
		> routers.deleted

	    WCADDED=`wc -l routers.added | sed -e 's/^ *\([^ ]*\) .*$/\1/'`
	    WCDELETED=`wc -l routers.deleted | sed -e 's/^ *\([^ ]*\) .*$/\1/'`

	    if [ $WCADDED -gt 0 ] ; then
		echo Added routers:
		cat routers.added
		echo
	    fi
	    if [ $WCDELETED -gt 0 ] ; then
		echo Deleted routers:
		cat routers.deleted
		echo
	    fi

	    rm -f routers.added routers.deleted
	fi
    ) > routers.mail

    if [ -s routers.mail ] ; then
	(
	  echo "To: $adminmailrcpt"
	  echo "Subject: changes in $GROUP routers"
	  echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
	  echo ""
	  cat routers.mail
	) | $SENDMAIL -t $MAILOPTS
    fi
    rm -f routers.mail

    cd $DIR/configs

    # Add new routers to the CVS structure.
    for router in `comm -13 $DIR/routers.up $DIR/routers.up.new`
    do
	OFS=$IFS
	IFS=';'
	set $router
	IFS=$OFS
	router=$1

	message="created new $router config file"

	touch $router
	case $RCSSYS in
	    cvs )
		cvs add -ko $router
		cvs commit -m "$message" $router
		;;
	    svn )
		svn add $router
		svn commit -m "$message" $router
		;;
	    git | git-remote )
		(
		    flock -x 200
		    git add $router
		    git commit -m "$message"
		) 200>$BASEDIR/.lockfile
		;;
	esac
	echo "Added $router"
	unset message
    done
    echo
    cd $DIR

fi
mv -f routers.all.new routers.all
if [ $? -ne 0 ] ; then
    echo "Error: could not rename routers.all.new"
fi
mv -f routers.down.new routers.down
if [ $? -ne 0 ] ; then
    echo "Error: could not rename routers.down.new"
fi
mv -f routers.up.new routers.up
if [ $? -ne 0 ] ; then
    echo "Error: could not rename routers.up.new"
fi
rm -f routers.db
trap 'rm -fr $TMP;' 1 2 15

cd $DIR/configs
# check for 'up' routers missing in RCS.  no idea how this happens to some folks
for router in `cut -d\; -f1 ../routers.up` ; do
    case $RCSSYS in
       cvs )
           cvs status $router | grep -i 'status: unknown' > /dev/null 2>&1
           if [ $? -eq 0 ]; then
               touch $router
               cvs add -ko $router
               echo "$RCSSYS added missing router $router"
           fi
           ;;
       svn )
           svn status $router | grep '^?' > /dev/null 2>&1
           if [ $? -eq 0 ]; then
               touch $router
               svn add $router
               echo "$RCSSYS added missing router $router"
           fi
           ;;
       git | git-remote )
           git ls-files $router > /dev/null 2>&1
           if [ $? -eq 1 ]; then
               touch $router
               (
                   flock -x 200
                   git add $router
                   git commit -m "added missing router $router"
               ) 200>$BASEDIR/.lockfile
               echo "$RCSSYS added missing router $router"
           fi
           ;;
    esac
done
echo

# delete configs from RCS for routers not listed in routers.up.
for router in `find . \( -name \*.new -prune -o -name CVS -prune -o -name .svn -prune \) -o -type f -print | sed -e 's/^.\///'` ; do
    grep -i "^$router\;" ../router.db > /dev/null 2>&1
    if [ $? -eq 1 ] ; then
	rm -f $router
	case $RCSSYS in
            cvs | svn )
		$RCSSYS delete $router
		$RCSSYS commit -m "deleted router $router" $router
		;;
            git | git-remote )
		(
                    flock -x 200
                    git rm $router
                    git commit -m "deleted router $router"
		) 200>$BASEDIR/.lockfile
		;;
	esac
	echo "Deleted $router"
    fi
done
cd $DIR

# no routers, empty list or all 'down'
if [ ! -s routers.up ]
then
    # commit router.db
    message="updates of group $GROUP"
    case $RCSSYS in
	cvs | svn )
	    $RCSSYS commit -m "$message" router.db
	    ;;
	git | git-remote )
	    (
		flock -x 200
		git add router.db
		git commit -m "$message"
	    ) 200>$BASEDIR/.lockfile
	    ;;
    esac
    exit;
fi

# if a device (-r) was specified, see if that device is in this group
if [ "X$device" != "X" ] ; then
    trap 'rm -fr $TMP $DIR/routers.single;' 1 2 15
    devlistfile="$DIR/routers.single"
    grep -i "^$device\;" routers.up > $devlistfile
    if [ $? -eq 1 ] ; then
	exit;
    fi
else
    devlistfile="$DIR/routers.up"
fi

# Now we can actually try to get the configs
cd $DIR/configs

# The number of processes running at any given time can be
# tailored to the specific installation.
echo ""
echo "Trying to get all of the configs."
par -q -n $PAR_COUNT -c 'rancid-fe "{}"' $devlistfile

# This section will generate a list of missed routers
# and try to grab them again.  It will run through
# $pass times.
pass=$MAX_ROUNDS
round=1
if [ -f $DIR/routers.up.missed ] ; then
    rm -f $DIR/routers.up.missed
fi
while [ $round -le $pass ]
do
    for router in `cat $devlistfile`
    do
	OFS=$IFS
	IFS=';'
	set $router
	IFS=$OFS
	router=$1; mfg=$2

	if [ ! -s $router.new ]
	then
	    echo "$router;$mfg" >> $DIR/routers.up.missed
	    rm -f $router.new
	fi
    done

    if [ -f $DIR/routers.up.missed ] ; then
	echo "====================================="
	echo "Getting missed routers: round $round."
	par -q -n $PAR_COUNT -c 'rancid-fe "{}"' $DIR/routers.up.missed
	rm -f $DIR/routers.up.missed
	round=`expr $round + 1`
    else
	echo "All routers sucessfully completed."
	round=`expr $pass + 1`
    fi
done
echo

# Make sure that no empty/truncated configs are accepted.  The remainder are
# renamed from device_name.new -> device_name.
for router in `cat $devlistfile`
do
    OFS=$IFS
    IFS=';'
    set $router
    IFS=$OFS
    router=$1;

    if [ ! -s $router.new ] ; then
	rm -f $router.new
    else
	notcomment=`egrep -v "^[-*\!\;#]|\/\*" $router.new | wc -l`
	if [ $notcomment -gt 10 ]; then
	    lines=1;
	else
	    lines=0;
	fi

	if [ ! $lines ] ; then
	    rm -f $router.new
	else
	    mv $router.new $router
	    if [ $? -ne 0 ] ; then
		echo "Error: could not rename $router.new to $router"
		rm -f $router.new
	    fi
	fi
    fi
done

# This has been different for different machines...
# Diff the directory and then checkin.
trap 'rm -fr $TMP $TMP.diff $DIR/routers.single;' 1 2 15
cd $DIR

if [ $alt_mailrcpt -eq 1 ] ; then
    subject="router config diffs - courtesy of $mailrcpt"
else
    subject="router config diffs"
fi
if [ "X$device" != "X" ] ; then
    subject="$GROUP/$device $subject"
    message="updates of group $GROUP - courtesy of $mailrcpt"
else
    subject="$GROUP $subject"
    message="updates of group $subject"
fi

case $RCSSYS in
    cvs )
        if [ $HTMLMAILS == YES ]; then
	    cvs -f @DIFF_CMD@ -ko > /dev/null
	    if [ $? -qe 0 ] ; then
  	        # only process HTML mail fi there really is a difference
  	        cvs -f @DIFF_CMD@ -ko | sed -e '/^RCS file: /d' -e '/^--- /d' \
                    -e '/^+++ /d' -e 's/^\([-+ ]\)/\1 /' | ansi2html >$TMP.diff
    	    fi
        else
            cvs -f @DIFF_CMD@ -ko | sed -e '/^RCS file: /d' -e '/^--- /d' \
                -e '/^+++ /d' -e 's/^\([-+ ]\)/\1 /' >$TMP.diff
        fi
    	    cvs commit -m "$message"
	;;
    svn )
        if [ $HTMLMAILS == YES ]; then
            svn diff | sed -e '/^+++ /d' -e 's/^\([-+ ]\)/\1 /' | ansi2html >$TMP.diff
        else
            svn diff | sed -e '/^+++ /d' -e 's/^\([-+ ]\)/\1 /' >$TMP.diff
	fi
	    svn commit -m "$message"
	;;
    git | git-remote )
	# with git we do things differently - first commit, then grab the diff
	(
	    flock -x 200
	    git add router.db
	    for router in `cat $devlistfile | cut -d';' -f1`
	    do
		git add configs/$router
	    done
	    git commit -m "$message"
	    if [ $? -eq 0 ]; then
    		# only generate a diff if the commit was successful
		if [ $HTMLMAILS == YES ]; then
                    git diff --patch-with-stat --quiet HEAD^ HEAD -- .
                    if [ $? -eq 1 ] ; then
			# only process HTML mail if there really is a difference
			which pygmentize || (echo "You don't have pygments installed.."; exit 1)
			PYGMENT_STYLE=${PYGMENT_STYLE:-native}
			git diff --color --patch-with-stat HEAD^ HEAD -- . | pygmentize -f html -l diff -O full,noclasses,style="$PYGMENT_STYLE" > $TMP.diff
                    fi
                else
                    git diff --patch-with-stat HEAD^ HEAD -- . >$TMP.diff
                fi
		if [ $RCSSYS = "git-remote" ] ; then
                    # only push to remotes if commit was successful
                    for repo in $(git remote) ; do
			git push ${repo}
                    done
		fi
            fi
	) 200>$BASEDIR/.lockfile
	;;
esac
unset message

# Mail out the diffs (if there are any).
if [ -s $TMP.diff ] ; then
    # Split up the email if the diff is huge.
    MAXSZ=${MAILSPLIT:=0}
    if [ $MAXSZ -ne 0 ] ; then
	BLOCKSIZE=1024; export BLOCKSIZE
	tmpk=`perl -e "my(@S) = stat(\"$TMP.diff\"); print int(\\$S[7] / 1024);"`
	unset BLOCKSIZE
	if [ $tmpk -lt $MAXSZ ] ; then
	    MAXSZ=0
	fi
    fi
    # if not too big or not specified to do split, then email as is:
    if [ $MAXSZ -eq 0 ] ; then
	if [ $HTMLMAILS == YES ]; then
            (
		echo "To: $mailrcpt"
		echo "Subject: $subject"
		echo "Mime-Version: 1.0"
		echo "Content-type: text/html"
		echo "Content-transfer-encoding: 8bit"
		echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
		echo ""
		cat $TMP.diff
            ) | $SENDMAIL -oi -t $MAILOPTS
	else
            (
		echo "To: $mailrcpt"
		echo "Subject: $subject"
		echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
		echo ""
		cat $TMP.diff
            ) | $SENDMAIL -t $MAILOPTS
	fi
    else
	# Otherwise, split up the file and mail out.
	CDIR=`pwd`
	SDIR=${TMPDIR:=/tmp}/rancid.$GROUP.$$.mail
	error=`mkdir $SDIR`
	if [ $? -ne 0 ] ; then
	    echo "Could not create $SDIR directory" >&2
	    echo $error >&2
	else
	    cd $SDIR
	    split -b${MAXSZ}k $TMP.diff
	    nfiles=`ls | wc -l | sed -e 's/^ *//' |cut -d' ' -f1`
	    n=0
	    dt=`perl -e 'print time();'`
	    for file in `ls`; do
		n=`expr $n + 1`
		MSGID="<$dt.RANCID$GROUP$$${nfiles}${n}@`hostname`>"
		(
		echo "To: $mailrcpt"
		echo "Subject: $n of ${nfiles}: $subject"
		echo "Message-Id: $MSGID"
		if [ $n -gt 1 ] ; then
		    echo "References: $LASTIDS"
		fi
		echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
		echo ""
		cat $file
		) | $SENDMAIL -t $MAILOPTS
		LASTIDS="$LASTIDS $MSGID"
		if [ $n -lt $nfiles ]; then
		    # this just tries to make the msgs order right in MUAs
		    sleep 1
		fi
	    done
	    cd $CDIR
	    rm -rf $SDIR
	fi
    fi
fi

# If any machines have not been reached within the last $OLDTIME
# hours, mail out a list of them.
cd $DIR/configs
rm -f $DIR/routers.failed
if [ "X$OLDTIME" = "X" ] ; then
    OLDTIME=24
fi
@PERLV@ -F\; -ane "{\$t = (stat(\$F[0]))[9]; print \`ls -ld \$F[0]\`
	if (time() - \$t >= $OLDTIME*60*60);}" $devlistfile | sort -u > $DIR/routers.failed
if [ -s $DIR/routers.failed ] ; then
	(
	  echo "To: $adminmailrcpt"
	  echo "Subject: config fetcher problems - $GROUP"
	  echo "$MAILHEADERS" | awk '{L = "";LN = $0;while (LN ~ /\\n/) { I = index(LN,"\\n");L = L substr(LN,0,I-1) "\n";LN = substr(LN,I+2,length(LN)-I-1);}print L LN;}'
	  echo ""
	  echo "The following routers have not been successfully contacted for"
	  echo "more than $OLDTIME hours."

	  cat $DIR/routers.failed
	) | $SENDMAIL -t $MAILOPTS
fi

# Cleanup
rm -f $TMP.diff $DIR/routers.single $DIR/routers.failed
trap '' 1 2 15
